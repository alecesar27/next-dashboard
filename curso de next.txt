https://nextjs.org/learn/dashboard-app/adding-authentication

Deploy no Git hub
Só para acessar a página Git Hub

login alecesar27@yahoo.com.br
password  *Alan2009


Deploy no Git hub


Usar esse para deploy
Token2 NUNCA EXPIRA
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

gh auth login
git init
git add .
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/alecesar27/next-dashboard.git

git push -u origin main


endereço da aplicação
https://nextjs-dashboard-kappa-sandy.vercel.app/

Informações do snippet Postgresql

POSTGRES_URL="postgres://default:cx6OwgFanuR2@ep-spring-glitter-99751005-pooler.us-east-1.postgres.vercel-storage.com:5432/verceldb"
POSTGRES_PRISMA_URL="postgres://default:cx6OwgFanuR2@ep-spring-glitter-99751005-pooler.us-east-1.postgres.vercel-storage.com:5432/verceldb?pgbouncer=true&connect_timeout=15"
POSTGRES_URL_NON_POOLING="postgres://default:cx6OwgFanuR2@ep-spring-glitter-99751005.us-east-1.postgres.vercel-storage.com:5432/verceldb"
POSTGRES_USER="default"
POSTGRES_HOST="ep-spring-glitter-99751005-pooler.us-east-1.postgres.vercel-storage.com"
POSTGRES_PASSWORD="cx6OwgFanuR2"
POSTGRES_DATABASE="verceldb"




Criação de autenticação e formulário de login


instala o NextAuth.js

npm install next-auth@beta


 generate a secret key for your application
 
 openssl rand -base64 32
 
 no arquivo .env
 cola a secret key em
 AUTH_SECRET=your-secret-key
 
 
 
 cria o arquivo auth.config.ts con o conteúdo
 
import type { NextAuthConfig } from 'next-auth';
 
    export const authConfig = {
    pages: {
      signIn: '/login',
    },
    callbacks: {
       authorized({
       auth, request: { nextUrl } })
       {
       const isLoggedIn = !!auth?.user;
       const isOnDashboard = nextUrl.pathname.startsWith('/dashboard');
       if (isOnDashboard)
        {
 	    if (isLoggedIn) return true;
		return false; // Redirect unauthenticated users to login page
	      } else if (isLoggedIn) {
		return Response.redirect(new URL('/dashboard', nextUrl));
	      }
	      return true;
	    },
	},
    providers: [], // Add providers with an empty array for now
} satisfies NextAuthConfig;


cria o arquivo middleware.ts
import NextAuth from 'next-auth';
import { authConfig } from './auth.config';
 
   export default NextAuth(authConfig).auth;
 
   export const config = {
  // https://nextjs.org/docs/app/building-your-application/routing/middleware#matcher
   matcher: ['/((?!api|_next/static|_next/image|.*\\.png$).*)'],
};
 
 
 cria o arquivo auth.ts
 
 
import NextAuth from 'next-auth';
import Credentials from 'next-auth/providers/credentials';
import { authConfig } from './auth.config';
import { sql } from '@vercel/postgres';
import { z } from 'zod';
import type { User } from '@/app/lib/definitions';
import bcrypt from 'bcrypt';
 
// ...
 
export const { auth, signIn, signOut } = NextAuth({
  ...authConfig,
  providers: [
    Credentials({
      async authorize(credentials) {
        // ...
 
        if (parsedCredentials.success) {
          const { email, password } = parsedCredentials.data;
          const user = await getUser(email);
          if (!user) return null;
          const passwordsMatch = await bcrypt.compare(password, user.password);
 
          if (passwordsMatch) return user;
        }
 
        console.log('Invalid credentials');
        return null;
      },
    }),
  ],
});
 
 cria uma action para authenticatio no arquivo /app/lib/actions.ts fazen os devidos imports

import { signIn } from '@/auth';
import { AuthError } from 'next-auth';
 
// ...
 
	export async function authenticate(
	  prevState: string | undefined,
	  formData: FormData,
	) {
	    try {
		    await signIn('credentials', formData);
	    } catch (error)
	     {
	        if (error instanceof AuthError) {
      		  switch (error.type) {
        	   case 'CredentialsSignin':
	          return 'Invalid credentials.';
        	  default:
	          return 'Something went wrong.';
     	          }
     	        }
	       throw error;
  	     }
        } 


formulário de login app/ui/login-forms.tsx
 
'use client';
 
import { lusitana } from '@/app/ui/fonts';
import {
	  AtSymbolIcon,
	  KeyIcon,
	  ExclamationCircleIcon,
	} from '@heroicons/react/24/outline';
import { ArrowRightIcon } from '@heroicons/react/20/solid';
import { Button } from '@/app/ui/button';
import { useFormState, useFormStatus } from 'react-dom';
import { authenticate } from '@/app/lib/actions';
 
export default function LoginForm() {
  const [errorMessage, dispatch] = useFormState(authenticate, undefined);
 
  return (
    <form action={dispatch} className="space-y-3">
      <div className="flex-1 rounded-lg bg-gray-50 px-6 pb-4 pt-8">
        <h1 className={`${lusitana.className} mb-3 text-2xl`}>
          Please log in to continue.
        </h1>
        <div className="w-full">
          <div>
            <label
              className="mb-3 mt-5 block text-xs font-medium text-gray-900"
              htmlFor="email"
            >
              Email
            </label>
            <div className="relative">
              <input
                className="peer block w-full rounded-md border border-gray-200 
                py-[9px] pl-10 text-sm outline-2 placeholder:text-gray-500"
                id="email"
                type="email"
                name="email"
                placeholder="Enter your email address"
                required
              />
              <AtSymbolIcon className="pointer-events-none absolute 
              left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500 peer-focus:text-gray-900" />
            </div>
          </div>
          <div className="mt-4">
            <label
              className="mb-3 mt-5 block text-xs font-medium text-gray-900"
              htmlFor="password"
            >
              Password
            </label>
            <div className="relative">
              <input
                className="peer block w-full rounded-md border
                border-gray-200 py-[9px] pl-10 text-sm outline-2 placeholder:text-gray-500"
                id="password"
                type="password"
                name="password"
                placeholder="Enter password"
                required
                minLength={6}
              />
              <KeyIcon className="pointer-events-none absolute
               left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 
               text-gray-500 peer-focus:text-gray-900" />
            </div>
          </div>
        </div>
        <LoginButton />
        <div
          className="flex h-8 items-end space-x-1"
          aria-live="polite"
          aria-atomic="true"
        >
          {errorMessage && (
            <>
              <ExclamationCircleIcon className="h-5 w-5 text-red-500" />
              <p className="text-sm text-red-500">{errorMessage}</p>
            </>
          )}
        </div>
      </div>
    </form>
  );
}
 
function LoginButton() {
  const { pending } = useFormStatus();
 
  return (
    <Button className="mt-4 w-full" aria-disabled={pending}>
      Log in <ArrowRightIcon className="ml-auto h-5 w-5 text-gray-50" />
    </Button>
  );
}


adicionar a funcionalidade de logout no sidenav


import Link from 'next/link';
import NavLinks from '@/app/ui/dashboard/nav-links';
import AcmeLogo from '@/app/ui/acme-logo';
import { PowerIcon } from '@heroicons/react/24/outline';
import { signOut } from '@/auth';
 
export default function SideNav() {
  return (
    <div className="flex h-full flex-col px-3 py-4 md:px-2">
      // ...
      <div className="flex grow flex-row justify-between space-x-2 
      		md:flex-col md:space-x-0 md:space-y-2">
        <NavLinks />
        <div className="hidden h-auto w-full grow rounded-md bg-gray-50 md:block"></div>
        <form
          action={async () => {
            'use server';
            await signOut();
          }}
        >
          <button className="flex h-[48px] grow items-center justify-center gap-2
           rounded-md bg-gray-50 p-3 text-sm font-medium hover:bg-sky-100 
           hover:text-blue-600 md:flex-none md:justify-start md:p-2 md:px-3">
            <PowerIcon className="w-6" />
            <div className="hidden md:block">Sign Out</div>
          </button>
        </form>
      </div>
    </div>
  );
}

Login e usuário para entrar na aplicação
    Email: user@nextmail.com
    Password: 123456


throw new Error('Failed to fetch user.');

table users
id
name
email
password






